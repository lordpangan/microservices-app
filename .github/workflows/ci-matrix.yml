name: ci-matrix

on:
  pull_request:
    paths:
      - 'services/**'
      - '.github/**'
      - 'gradle/**'
      - 'versions.toml'
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - '.github/**'
      - 'gradle/**'
      - 'versions.toml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.REGISTRY || 'ghcr.io/<me>' }}
  JAVA_VERSION: '21'

jobs:
  detect:
    # Detect which microservices have changed since last commit or PR base
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set
        run: |
          set -euo pipefail

          EVENT_NAME="${{ github.event_name }}"
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          BEFORE_SHA="${{ github.event.before }}"
          BASE_REF="${{ github.base_ref }}"  # non-empty on PRs
          BASE_SHA=""

          # check if even is PR or push to base branch
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            # Base commit of the PR’s target branch at PR time
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            # Make sure we have that commit locally
            git fetch --no-tags --prune origin "$BASE_REF":refs/remotes/origin/"$BASE_REF" || true
          else
            # Check if its the first push on a new branch
            if [[ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" && -n "$BEFORE_SHA" ]]; then
              BASE_SHA="$BEFORE_SHA"
              git fetch --no-tags --prune origin "$BASE_SHA" || true
            else
              # First push on a new branch or workflow_dispatch: compare to merge-base with default branch
              git fetch --no-tags --prune origin "$DEFAULT_BRANCH"
              BASE_SHA="$(git merge-base HEAD origin/$DEFAULT_BRANCH || true)"
              # Fallback to the very first commit if merge-base fails
              if [[ -z "$BASE_SHA" ]]; then
                BASE_SHA="$(git rev-list --max-parents=0 HEAD)"
              fi
            fi
          fi

          # Do the diff (triple-dot = since common ancestor)
          changed="$(git diff --name-only "$BASE_SHA"...HEAD | grep '^services/' || true)"

          svcs=""
          for s in orders-service inventory-service payment-service; do
            if echo "$changed" | grep -q "^services/$s/"; then
              svcs="$svcs\"$s\","
            fi
          done

          if [[ -z "$svcs" ]]; then
            svcs="\"orders-service\",\"inventory-service\",\"payment-service\","
          fi

          echo "matrix={\"service\":[${svcs%?}]}" >> "$GITHUB_OUTPUT"

      - name: Debug outputs
        run: echo "Matrix = ${{ steps.set.outputs.matrix }}"

  build_test_scan_push:
    # Build, test, scan, and push the changed microservices
    needs: detect
    if: ${{ fromJson(needs.detect.outputs.matrix).service[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}

    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      pull-requests: write
      deployments: write
      checks: write

    env:
      SVC: ${{ matrix.service }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build & unit tests
        working-directory: services/${{ env.SVC }}
        run: |
          ../../gradlew -p ../../ :services:${{ env.SVC }}:clean :services:${{ env.SVC }}:build -x test
          ../../gradlew -p ../../ :services:${{ env.SVC }}:test

      - name: Component tests (placeholder)
        working-directory: services/${{ env.SVC }}
        run: echo "Add Testcontainers/WireMock ITs here" && true

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: bp
        uses: ./.github/actions/docker-build-push
        with:
          context: .
          dockerfile: services/${{ env.SVC }}/Dockerfile
          image: ${{ env.REGISTRY }}/${{ env.SVC }}
          tags: sha-${{ github.sha || github.run_id }},latest

      - uses: ./.github/actions/sbom-and-scan
        with:
          image_ref: ${{ env.REGISTRY }}/${{ env.SVC }}:sha-${{ github.sha }}

      - name: Summary
        run: echo "### ${SVC} built → $REGISTRY/${SVC}:sha-${GITHUB_SHA::8}" >> $GITHUB_STEP_SUMMARY
